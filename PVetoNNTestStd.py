# -*- coding: utf-8 -*-
"""PVetoNNTestStd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tccrMq3xe98TUj7gdpvXQVnWZ0Vkxy8V

PVeto Model Test
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
testsignals = pd.read_csv("/content/drive/My Drive/PVetoNN/PVetoMCData/Standard/StandardTest/200913PVetoMCTestNoisySignalsLandauAmp200k.txt", delimiter="\n",header=None)
print('testsignals.shape = ',testsignals.shape)

import numpy as np
testsignals = np.array(testsignals)
NTestEvents = int(len(testsignals)/1024)
testsignals = testsignals.reshape(NTestEvents,1024) # Instead of having shape (1024*NEvents,1), reshape to have shape (NEvents,1024)
print(testsignals.shape)

# Lets visualise some events
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
from matplotlib.ticker import MultipleLocator

fig, axarr = plt.subplots(nrows=2, ncols=3)

# plot 3 events to check their content  
for index, event, title in zip(np.arange(6), testsignals[100:106], ['Event 0', 'Event 1', 'Event 2', 'Event 3', 'Event 4', 'Event 5']):# loop over zip(tuples)
    #print(int(index/3),index%3)
    ax=axarr[int(index/3),index%3]
    img = ax.plot(event)
    ax.set_title(title, fontsize=16)
    ax.tick_params(labelsize=12)
    ax.xaxis.set_major_locator(MultipleLocator(1))
    ax.xaxis.set_major_locator(MultipleLocator(100))
    fig.set_figwidth(20)
    fig.set_figheight(10)
    fig.tight_layout()

plt.show()

fig, ax = plt.subplots(figsize=(20, 10))
ax.plot(testsignals[2][300:350])
plt.xticks(np.arange(0,50,step=1))  # Set label locations.
plt.grid(True)

import tensorflow as tf
from tensorflow import keras

no_outputs = 14 # maximum number of hits expected

# Following the architecture of the CNN from the image recognition lab (14/5/2020):
# Simple CNN:

# Define input to neural network (tensors of 1024 time samples x 1 amplitude per sample)
inputs = keras.Input(shape=(1024,1))
x=inputs

# 1st convolutional block
x = keras.layers.Conv1D(16, kernel_size=(3), name='Conv_1')(x)
x = keras.layers.LeakyReLU(0.1)(x)      
x = keras.layers.MaxPool1D((2), name='MaxPool_1')(x)

# 2nd convolutional block
x = keras.layers.Conv1D(16, kernel_size=(3), name='Conv_2')(x)
x = keras.layers.LeakyReLU(0.1)(x)
x = keras.layers.MaxPool1D((2), name='MaxPool_2')(x)

# 3rd convolutional block 
x = keras.layers.Conv1D(32, kernel_size=(3), name='Conv_3')(x)
x = keras.layers.LeakyReLU(0.1)(x)
x = keras.layers.MaxPool1D((2), name='MaxPool_3')(x)

# Flatten output tensor of the last convolutional layer so it can be used as  
# input to the dense layers

x = keras.layers.Flatten(name='Flatten')(x)

# dense network: 2 dense hidden layer with 256 neurons, with ReLU activation

# Classifier
x = keras.layers.Dense(64, name='Dense_1')(x)
x = keras.layers.ReLU(name='ReLU_dense_1')(x)
x = keras.layers.Dropout(0.2)(x)
x = keras.layers.Dense(64, name='Dense_2')(x)
x = keras.layers.ReLU(name='ReLU_dense_2')(x)


# Clusters are distributed according to a poisson distribution.
# In single particle mode this means no. clusters ~ Poi(1).
# The probability of having more than 4 clusters in single particle mode is 0.37%
outputs = keras.layers.Dense(no_outputs, activation='softmax', name='Output')(x)

# Model definition
model = keras.Model(inputs=inputs, outputs=outputs, name='VGGlike_CNN')

# Print model summary
model.summary()

# Show model structure
keras.utils.plot_model(model, show_shapes=True)

modelfilename='/content/drive/My Drive/PVetoNN/StandardModel/PVetoLandauAmpModel'
model.load_weights(modelfilename)
print(modelfilename)

from time import process_time
t_start = process_time()
testoutput = model.predict(testsignals) # run the model to predict the number of hits in each signals of the ThousandTestSamples
t_stop = process_time() 
testoutput.shape

print("Time taken in prediction process:", t_stop-t_start,"seconds")

# go from onehot encoding to integer
#def decode(datum):
 #   return np.argmax(datum)

predictedhits=np.argmax(testoutput, axis=1)

np.savetxt("/content/drive/My Drive/PVetoNN/PVetoMCData/Standard/StandardResults/PVetoMCNNTestNoisyHitsLandauAmp200k.txt",predictedhits,delimiter="\n")
print("Saved!")

print(predictedhits.size/1000,"k")